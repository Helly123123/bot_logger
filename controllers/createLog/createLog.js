const Logs = require("../../models/Logs");
const { decodeJwtAndGetUserId } = require("../../utils/jwtDecoder");
const { getTypeLog } = require("../../utils/getTypeLog");
const { sendServerLog, sendErrorToGroup } = require("../../bots/bot");

module.exports = async (req, res) => {
  try {
    const {
      level,
      payload,
      error,
      message,
      serverDomain,
      method,
      domain,
      endpoint,
      status,
    } = req.body;

    const authHeader = req.headers.authorization;
    if (!authHeader) {
      return res.status(401).json({
        success: false,
        message: "Authorization header missing",
      });
    }

    const token = authHeader.split(" ")[1];
    const checkToken = await decodeJwtAndGetUserId(token);

    if (!checkToken.success) {
      return res.status(401).json({
        success: false,
        message: "Invalid token",
      });
    }

    let processedPayload = "";
    if (payload) {
      if (typeof payload === "string") {
        processedPayload = payload;
      } else if (typeof payload === "object") {
        try {
          processedPayload = JSON.stringify(payload);
        } catch (stringifyError) {
          processedPayload = "Unable to stringify payload object";
          console.warn(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å payload –≤ JSON:",
            stringifyError
          );
        }
      }
    }

    const logData = {
      level: level || (status === "error" ? "ERROR" : "INFO"),
      payload: processedPayload,
      error: error || "",
      message: message || "",
      method: method || req.method,
      endpoint: endpoint || req.url,
      status: status || 200,
      server: serverDomain,
      type: getTypeLog(serverDomain),
      domain: domain || "",
      email: checkToken.email,
    };

    console.log("log", logData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ –±–∞–∑—É
    const createLog = await Logs.create(logData);
    console.log("‚úÖ –õ–æ–≥ —Å–æ–∑–¥–∞–Ω, ID:", createLog.id);

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –≥—Ä—É–ø–ø—É
    if (status === "ERROR") {
      console.log("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É...");

      sendErrorToGroup({
        ...logData,
        id: createLog.id,
        timestamp: new Date(),
      })
        .then((result) => {
          if (result && result.success) {
            console.log(
              `‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –≥—Ä—É–ø–ø—É. ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.messageId}`
            );
          } else {
            console.log(
              `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –≥—Ä—É–ø–ø—É: ${
                result?.reason || "unknown error"
              }`
            );
          }
        })
        .catch((err) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É:", err.message);
        });
    }

    return res.status(200).json({
      success: true,
      data: createLog,
      message: "–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞:", error.message);
    console.error("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", {
      code: error.code,
      errno: error.errno,
      sqlState: error.sqlState,
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(req.body, null, 2));

    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–∞",
      error: error.message,
    });
  }
};
