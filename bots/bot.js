const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

if (!process.env.LOG_GROUP_ID) {
  console.error("‚ùå LOG_GROUP_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10,
    },
  },
  onlyFirstMatch: true,
  request: {
    timeout: 10000,
  },
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø
const groupSettings = new Map(); // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
const errorStats = new Map(); // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
const rateLimitCache = new Map(); // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
const LOGGER_CONFIG = {
  maxMessageLength: 4000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  truncateLength: 1000, // –î–ª–∏–Ω–∞ –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
  rateLimit: {
    windowMs: 60000, // 1 –º–∏–Ω—É—Ç–∞
    maxRequests: 10, // –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  },
  levels: {
    ERROR: { emoji: "üö®", priority: 4 },
    WARN: { emoji: "‚ö†Ô∏è", priority: 3 },
    INFO: { emoji: "‚ÑπÔ∏è", priority: 2 },
    DEBUG: { emoji: "üîç", priority: 1 },
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
const escapeHtml = (text) => {
  if (!text) return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit
const checkRateLimit = (source) => {
  const now = Date.now();
  const windowMs = LOGGER_CONFIG.rateLimit.windowMs;

  if (!rateLimitCache.has(source)) {
    rateLimitCache.set(source, []);
  }

  const requests = rateLimitCache.get(source);
  const windowStart = now - windowMs;

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  while (requests.length > 0 && requests[0] < windowStart) {
    requests.shift();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
  if (requests.length >= LOGGER_CONFIG.rateLimit.maxRequests) {
    return false;
  }

  requests.push(now);
  return true;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
const truncateText = (text, maxLength = LOGGER_CONFIG.truncateLength) => {
  if (!text || text.length <= maxLength) return text;
  return (
    text.substring(0, maxLength) +
    `\n... [–æ–±—Ä–µ–∑–∞–Ω–æ, –≤—Å–µ–≥–æ ${text.length} —Å–∏–º–≤–æ–ª–æ–≤]`
  );
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞ –æ—à–∏–±–æ–∫
const formatErrorStack = (error) => {
  if (!error) return "No error details";

  if (typeof error === "string") return error;
  if (error instanceof Error) {
    return `${error.name}: ${error.message}\n${
      error.stack || "No stack trace"
    }`;
  }
  if (typeof error === "object") {
    try {
      return JSON.stringify(error, null, 2);
    } catch {
      return String(error);
    }
  }

  return String(error);
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ –≥—Ä—É–ø–ø—É
const sendErrorToGroup = async (logData, options = {}) => {
  try {
    // –ï—Å–ª–∏ LOG_GROUP_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    if (!process.env.LOG_GROUP_ID) {
      console.warn("‚ö†Ô∏è LOG_GROUP_ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø—É");
      return { success: false, reason: "no_group_id" };
    }

    const {
      level = "ERROR",
      message = "",
      error = "",
      method = "unknown",
      domain = "unknown",
      endpoint = "unknown",
      status = "error",
      server = "unknown",
      email = "unknown",
      payload = "",
      timestamp = new Date(),
    } = logData;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if (!checkRateLimit(server)) {
      console.warn(`‚ö†Ô∏è Rate limit exceeded for server: ${server}`);
      return { success: false, reason: "rate_limit" };
    }

    const levelConfig =
      LOGGER_CONFIG.levels[level.toUpperCase()] || LOGGER_CONFIG.levels.ERROR;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorMessage = formatErrorStack(error || message);
    const truncatedError = truncateText(errorMessage);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º payload
    let payloadText = "No payload";
    if (payload) {
      try {
        if (typeof payload === "string") {
          payloadText = truncateText(payload);
        } else {
          payloadText = truncateText(JSON.stringify(payload, null, 2));
        }
      } catch {
        payloadText = "Unable to stringify payload";
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const formattedMessage = `
${levelConfig.emoji} <b>${level.toUpperCase()}: –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b>

üïí <b>–í—Ä–µ–º—è:</b> <code>${timestamp.toLocaleString("ru-RU")}</code>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>${escapeHtml(email)}</code>
üè¢ <b>–°–µ—Ä–≤–µ—Ä:</b> <code>${escapeHtml(server)}</code>
üåê <b>–î–æ–º–µ–Ω:</b> <code>${escapeHtml(domain)}</code>

üìã <b>–ú–µ—Ç–æ–¥:</b> <code>${escapeHtml(method)}</code>
üìç <b>Endpoint:</b> <code>${escapeHtml(endpoint)}</code>
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> <code>${escapeHtml(status)}</code>

üö® <b>–û—à–∏–±–∫–∞:</b>
<pre><code>${escapeHtml(truncatedError)}</code></pre>

üì¶ <b>–î–∞–Ω–Ω—ã–µ:</b>
<pre><code>${escapeHtml(payloadText)}</code></pre>
    `.trim();

    // –û–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendOptions = {
      parse_mode: "HTML",
      disable_web_page_preview: true,
      disable_notification: level === "INFO", // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ERROR –∏ WARN
      ...options,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const result = await bot.sendMessage(
      process.env.LOG_GROUP_ID,
      formattedMessage,
      sendOptions
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateErrorStats(level, server);

    console.log(`‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
    return { success: true, messageId: result.message_id };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:", error.message);
    return { success: false, reason: "send_failed", error: error.message };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)
const sendCriticalError = async (error, context = {}) => {
  // return sendErrorToGroup(
  //   {
  //     level: "ERROR",
  //     title: "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
  //     error,
  //     context,
  //     source: "critical",
  //   },
  //   {
  //     disable_notification: false, // –í—Å–µ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  //   }
  // );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const sendWarning = async (warning, context = {}) => {
  // return sendErrorToGroup({
  //   level: "WARN",
  //   title: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
  //   error: warning,
  //   context,
  //   source: "warning",
  // });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const sendInfo = async (info, context = {}) => {
  // return sendErrorToGroup({
  //   level: "INFO",
  //   title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
  //   error: info,
  //   context,
  //   source: "info",
  // });
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
const updateErrorStats = (level, source) => {
  const key = `${level}_${source}`;
  const stats = errorStats.get(key) || { count: 0, lastOccurred: new Date() };
  stats.count++;
  stats.lastOccurred = new Date();
  errorStats.set(key, stats);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
const getErrorStats = () => {
  const stats = {};
  errorStats.forEach((value, key) => {
    stats[key] = { ...value };
  });
  return stats;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
const sendStatsReport = async (groupId = process.env.LOG_GROUP_ID) => {
  const stats = getErrorStats();

  if (Object.keys(stats).length === 0) {
    // return sendErrorToGroup(
    //   {
    //     level: "INFO",
    //     title: "–û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º",
    //     error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö",
    //     source: "stats",
    //   },
    //   { groupId }
    // );
  }

  let statsText = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:</b>\n\n";

  Object.entries(stats).forEach(([key, data]) => {
    const [level, source] = key.split("_");
    const levelConfig =
      LOGGER_CONFIG.levels[level] || LOGGER_CONFIG.levels.INFO;
    statsText += `${levelConfig.emoji} <b>${level}</b> –æ—Ç <code>${source}</code>\n`;
    statsText += `   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>${data.count}</code>\n`;
    statsText += `   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è: <code>${data.lastOccurred.toLocaleString(
      "ru-RU"
    )}</code>\n\n`;
  });

  // return sendErrorToGroup(
  //   {
  //     level: "INFO",
  //     title: "–û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º",
  //     error: statsText,
  //     source: "stats_report",
  //   },
  //   { groupId }
  // );
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
bot.onText(/\/log_error (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const errorText = match[1];

  if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
    sendErrorToGroup({
      level: "ERROR",
      title: "–†—É—á–Ω–æ–π –ª–æ–≥ –æ—à–∏–±–∫–∏",
      error: errorText,
      source: "manual",
      groupId: chatId,
    });
  }
});

bot.onText(/\/log_warning (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const warningText = match[1];

  if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
    sendWarning(warningText, { manual: true, groupId: chatId });
  }
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;

  if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
    sendStatsReport(chatId);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on("error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞ Telegram:", error);
  sendCriticalError(error, { component: "telegram_bot" });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ polling –æ—à–∏–±–æ–∫
bot.on("polling_error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ polling:", error);
  sendCriticalError(error, { component: "telegram_polling" });
});

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
  sendInfo("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è", { reason: "SIGINT" }).then(() => {
    bot.stopPolling();
    process.exit(0);
  });
});

process.on("SIGTERM", () => {
  console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
  sendInfo("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è", { reason: "SIGTERM" }).then(() => {
    bot.stopPolling();
    process.exit(0);
  });
});

console.log("ü§ñ –ë–æ—Ç-–ª–æ–≥–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö!");

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  bot,
  sendErrorToGroup,
  sendCriticalError,
  sendWarning,
  sendInfo,
  sendStatsReport,
  getErrorStats,
  escapeHtml,
  truncateText,
  formatErrorStack,
};
