const Logs = require("../../models/Logs");

function registerButtonHandlers(bot, userSessions, logSubscribers, sendLog) {
  // –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userSelections = new Map();

  bot.on("callback_query", (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞:", data);

    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    bot.answerCallbackQuery(callbackQuery.id);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    switch (true) {
      // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤
      case data.startsWith("select_count_"):
        const count = data.replace("select_count_", "");
        userSelections.set(chatId, { count });
        selectLogType(bot, chatId, messageId, count);
        break;

      // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–æ–≥–æ–≤
      case data.startsWith("select_type_"):
        const type = data.replace("select_type_", "");
        const userSelection = userSelections.get(chatId) || {};
        userSelections.set(chatId, { ...userSelection, type });

        const selectedCount = userSelection.count || "all";
        getAllLogs(bot, chatId, messageId, selectedCount, type);
        break;

      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      case data === "get_status":
        handleStatus(bot, chatId, messageId);
        break;

      case data === "get_logs":
        selectLogsCount(bot, chatId, messageId);
        break;

      case data === "test_log":
        handleTestLog(bot, chatId, messageId, sendLog);
        break;

      case data === "subscribe":
        handleSubscribe(bot, chatId, messageId, logSubscribers);
        break;

      case data === "unsubscribe":
        handleUnsubscribe(bot, chatId, messageId, logSubscribers);
        break;

      case data === "main_menu":
        handleMainMenu(bot, chatId, messageId);
        break;

      default:
        console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞:", data);
    }
  });

  console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
}

function selectLogsCount(bot, chatId, messageId) {
  const text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤:";

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: "3 –ª–æ–≥–∞", callback_data: "select_count_3" }],
        [{ text: "5 –ª–æ–≥–æ–≤", callback_data: "select_count_5" }],
        [{ text: "10 –ª–æ–≥–æ–≤", callback_data: "select_count_10" }],
        [{ text: "–í—Å–µ –ª–æ–≥–∏", callback_data: "select_count_all" }],
        [{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
      ],
    },
  });
}

// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–æ–≥–æ–≤
function selectLogType(bot, chatId, messageId, count) {
  const countText = count === "all" ? "–≤—Å–µ" : count;
  const text = `üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${countText}):`;

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ", callback_data: "select_type_success" }],
        [{ text: "‚ùå –° –æ—à–∏–±–∫–∞–º–∏", callback_data: "select_type_error" }],
        [{ text: "üìã –í—Å–µ —Ç–∏–ø—ã", callback_data: "select_type_all" }],
        [{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", callback_data: "get_logs" }],
        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
      ],
    },
  });
}

async function getAllLogs(bot, chatId, messageId, count, type) {
  try {
    console.log("Getting logs with count:", count, "type:", type);

    const countNum = count === "all" ? null : parseInt(count);
    const getLogs = await Logs.getAllLogs({
      count: countNum,
      type: type === "all" ? null : type,
    });

    console.log("Found logs:", getLogs.length);

    if (getLogs.length === 0) {
      return bot.editMessageText("üì≠ –õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "get_logs" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
          ],
        },
      });
    }

    // –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å emoji –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    const formatLogEntry = (log, index) => {
      const payloadText = log.payload
        ? `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n${log.payload}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`
        : "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

      const errorText = log.error
        ? `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n${log.error}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`
        : "‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫";

      return `
üî∏ –õ–û–ì #${index + 1}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üÜî ID: ${log.id}
üë§ Email: ${log.email || "‚ùå –ù–µ—Ç email"}
üìã Method: ${log.method}
üìç From: ${log.from}
‚úÖ Status: ${log.status}

üì¶ PAYLOAD:
${payloadText}

‚ùå ERROR:
${errorText}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`;
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –ª–æ–≥–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const formattedLogs = getLogs
      .slice(0, 2)
      .map((log, index) => formatLogEntry(log, index))
      .join("\n");

    const countText = count === "all" ? "–≤—Å–µ" : count;
    const typeText = type === "all" ? "–≤—Å–µ—Ö —Ç–∏–ø–æ–≤" : type;
    const totalLogs = getLogs.length;

    const text = `üìä –õ–û–ì–ò –°–ï–†–í–ï–†–ê
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${countText}
–¢–∏–ø: ${typeText}
–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalLogs}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${formattedLogs}`;

    // –ï—Å–ª–∏ –ª–æ–≥–æ–≤ –±–æ–ª—å—à–µ 2, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (totalLogs > 2) {
      const remaining = totalLogs - 2;
      const additionalText = `\n\nüìã –ü–æ–∫–∞–∑–∞–Ω–æ 2 –∏–∑ ${totalLogs} –ª–æ–≥–æ–≤\n‚ñ∂Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è`;

      await bot.editMessageText(text + additionalText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [
              { text: "3 –ª–æ–≥–∞", callback_data: "select_count_3" },
              { text: "5 –ª–æ–≥–æ–≤", callback_data: "select_count_5" },
            ],
            [
              { text: "10 –ª–æ–≥–æ–≤", callback_data: "select_count_10" },
              { text: "–í—Å–µ –ª–æ–≥–∏", callback_data: "select_count_all" },
            ],
            [{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
          ],
        },
      });
    } else {
      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data: "get_logs" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
          ],
        },
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ —á–∞—Å—Ç—è–º
    if (totalLogs > 2) {
      for (let i = 2; i < totalLogs; i += 2) {
        const batch = getLogs.slice(i, i + 2);
        const batchText = batch
          .map((log, batchIndex) => formatLogEntry(log, i + batchIndex))
          .join("\n");

        await bot.sendMessage(
          chatId,
          `üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (${i + 1}-${Math.min(
            i + 2,
            totalLogs
          )} –∏–∑ ${totalLogs}):\n${batchText}`
        );
        await new Promise((resolve) => setTimeout(resolve, 500));
      }
    }
  } catch (error) {
    console.error("Error getting logs:", error);

    // –ü—Ä–æ—Å—Ç–æ–π fallback
    await bot.editMessageText(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [
              { text: "3 –ª–æ–≥–∞", callback_data: "select_count_3" },
              { text: "5 –ª–æ–≥–æ–≤", callback_data: "select_count_5" },
            ],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
          ],
        },
      }
    );
  }
}

function handleStatus(bot, chatId, messageId) {
  const text = `üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\nüìä –ü–æ—Ä—Ç: ${
    process.env.PORT || 3000
  }`;

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "get_status" }],
        [{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
      ],
    },
  });
}

function handleTestLog(bot, chatId, messageId, sendLog) {
  sendLog({
    level: "INFO",
    message: "–¢–µ—Å—Ç –∏–∑ –∫–Ω–æ–ø–∫–∏",
    source: "Button",
  });

  bot.editMessageText("‚úÖ –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }]],
    },
  });
}

function handleSubscribe(bot, chatId, messageId, logSubscribers) {
  logSubscribers.add(chatId);

  bot.editMessageText("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ª–æ–≥–∏!", {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }]],
    },
  });
}

function handleUnsubscribe(bot, chatId, messageId, logSubscribers) {
  logSubscribers.delete(chatId);

  bot.editMessageText("‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ª–æ–≥–æ–≤!", {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }]],
    },
  });
}

function handleMainMenu(bot, chatId, messageId) {
  const text = "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìä –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏", callback_data: "get_logs" }],
        [{ text: "üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data: "get_status" }],
        [{ text: "üì® –¢–µ—Å—Ç –ª–æ–≥–∞", callback_data: "test_log" }],
        [{ text: "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "subscribe" }],
        [{ text: "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "unsubscribe" }],
      ],
    },
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
function createMainMenu(bot, chatId) {
  const text = "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";

  bot.sendMessage(chatId, text, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìä –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏", callback_data: "get_logs" }],
        [{ text: "üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data: "get_status" }],
        [{ text: "üì® –¢–µ—Å—Ç –ª–æ–≥–∞", callback_data: "test_log" }],
        [{ text: "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "subscribe" }],
        [{ text: "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "unsubscribe" }],
      ],
    },
  });
}

module.exports = {
  registerButtonHandlers,
  createMainMenu,
};
