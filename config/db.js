const mysql = require("mysql2/promise");
require("dotenv").config();

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DB_NAME –µ—Å—Ç—å –≤ .env
const DB_NAME = process.env.DB_NAME || "auth_db"; // –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

const pool = mysql.createPool({
  host: process.env.DB_HOST || "localhost",
  user: process.env.DB_USER || "root",
  password: process.env.DB_PASSWORD || "", // –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  database: DB_NAME, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –±–∞–∑—ã
async function testConnection() {
  let connection;
  try {
    connection = await pool.getConnection();

    // –Ø–≤–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await connection.query(`USE ${DB_NAME}`);

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ ${DB_NAME}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const [tables] = await connection.query("SHOW TABLES LIKE 'be_pay_logs'");
    if (tables.length === 0) {
      console.warn("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ be_pay_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—ë
    if (error.code === "ER_BAD_DB_ERROR") {
      console.log("üîÑ –ü—ã—Ç–∞—é—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
      try {
        const adminConn = await mysql.createConnection({
          host: process.env.DB_HOST,
          user: process.env.DB_USER,
          password: process.env.DB_PASSWORD,
        });

        await adminConn.query(`CREATE DATABASE IF NOT EXISTS ${DB_NAME}`);
        console.log(`üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${DB_NAME} —Å–æ–∑–¥–∞–Ω–∞`);
        await adminConn.end();
      } catch (createError) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É:", createError.message);
      }
    }

    throw error;
  } finally {
    if (connection) connection.release();
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
testConnection();

module.exports = pool;
